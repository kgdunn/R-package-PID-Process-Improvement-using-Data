library(ggplot2)
install.packages("ggplot2")
help(require)
setRepositories(addURLs =
c(CRANxtras = "http://www.stats.ox.ac.uk/pub/RWin"))ads
R_HOME
R_HOME/etc/repositoriesads
R.home()
http://R-Forge.R-project.org
help(setRepositories)
getOption("repos")
chooseCRANmirror()
install.packages("FrF2")
setwd("~/Dropbox/Coursera/R-package/v0.1")
library(pid)
help(aes_string)
library(pid)
T <- c(-1, +1, -1, +1)  # centered and scaled temperature
S <- c(-1, -1, +1, +1)  # centered and scaled speed variable
y <- c(69, 60, 64, 53)  # conversion, is our response variable, y
doe.model <- lm(y ~ T + S + T * S)  # create a model with main effects, and interaction
paretoPlot(doe.model)
dir()
library(pid)
T <- c(-1, +1, -1, +1)  # centered and scaled temperature
S <- c(-1, -1, +1, +1)  # centered and scaled speed variable
y <- c(69, 60, 64, 53)  # conversion, is our response variable, y
doe.model <- lm(y ~ T + S + T * S)  # create a model with main effects, and interaction
paretoPlot(doe.model)
data(pollutant)
mod.full <- lm(y ~ C*T*S, data=pollutant)
paretoPlot(mod.full)
library(pid)
library(pid)
library(pid)
help("na.omit")
help(coeff)
help(coef)
help(importFrom)
importFrom
library(pid)
library(pid)
T <- c(-1, +1, -1, +1)  # centered and scaled temperature
S <- c(-1, -1, +1, +1)  # centered and scaled speed variable
y <- c(69, 60, 64, 53)  # conversion, is our response variable, y
doe.model <- lm(y ~ T + S + T * S)  # create a model with main effects, and interaction
paretoPlot(doe.model)
library(pid)
library(pid)
devtools::install_github("jennybc/googlesheets")
install.packages("devtools")
help(devtools)
install.packages("pid")
library(pid)
help(paretoPlot)
data(pollutant)
mod.full <- lm(y ~ C*T*S, data=pollutant)
paretoPlot(mod.full)
library(pid)
data("pollutant")
help(pollutant)
setwd("~/")
library(pid)
paretoPlot
data(pollutant)
mod.full <- lm(y ~ C*T*S, data=pollutant)
paretoPlot(mod.full)
library(pid)
data(pollutant)
mod.full <- lm(y ~ C*T*S, data=pollutant)
paretoPlot(mod.full)
paretoPlot
library(car)
help(qqPlot)
help(deparse)
read.csv('http://openmv.net/file/oil-company-doe.csv')
setwd("~/Dropbox/Coursera/R-package/pid-dev/data")
save
dir
oil.doe <- read.csv('http://openmv.net/file/oil-company-doe.csv')
save(oil.doe, )
save(oil.doe, 'oildoe')
save('oildoe', oil.doe)
help(save)
save('oil.doe', 'oildoe')
save(c('oil.doe',), 'oildoe')
save(c('oil.doe'), 'oildoe')
save(c('oil.doe'), file='oildoe.rda')
save('oil.doe', file='oildoe.rda')
summary(oil.doe)
load(solar)
setwd("~/Dropbox/Coursera/R-package/pid-dev/data")
load('solar.rda')
summary(solar)
solar$colnames
colnames
colnames(solar)
colnames(solar) <- c("A"                     "B"                     "C"                     "D", "y1", "y2")
colnames(solar) <- c("A" ,                    "B"    ,                 "C"     ,                "D", "y1", "y2")
solar
<- c(-1, +1)
design <- expand.grid(A=x, B=x, C=x, D=x)
A <- design$A
B <- design$B
C <- design$C
D <- design$D
# y1 = collection efficiency
y1 <- c(43.5, 51.3, 35.0, 38.4, 44.9, 52.4, 39.7, 41.3, 41.3, 50.2, 37.5, 39.2, 43, 51.9, 39.9, 41.6)
# y2 = energy delivery efficiency
y2 <- c(82, 83.7, 61.7,100, 82.1, 84.1, 67.7, 100, 82, 86.3, 66, 100, 82.2, 89.8, 68.6, 100)
# Full factorial model for the chosen y
model.y1 <- lm(y1 ~ A*B*C*D)    # new version is more efficient; model.y1 <- lm(y1 ~ (A + B + C + D)^4)
model.y2 <- lm(y2 ~ A*B*C*D)    # new version is more efficient; model.y2 <- lm(y2 ~ (A + B + C + D)^4)
summary(model.y1)
summary(model.y2)
x <- c(-1, +1)
design <- expand.grid(A=x, B=x, C=x, D=x)
A <- design$A
B <- design$B
C <- design$C
D <- design$D
# y1 = collection efficiency
y1 <- c(43.5, 51.3, 35.0, 38.4, 44.9, 52.4, 39.7, 41.3, 41.3, 50.2, 37.5, 39.2, 43, 51.9, 39.9, 41.6)
# y2 = energy delivery efficiency
y2 <- c(82, 83.7, 61.7,100, 82.1, 84.1, 67.7, 100, 82, 86.3, 66, 100, 82.2, 89.8, 68.6, 100)
# Full factorial model for the chosen y
model.y1 <- lm(y1 ~ A*B*C*D)    # new version is more efficient; model.y1 <- lm(y1 ~ (A + B + C + D)^4)
model.y2 <- lm(y2 ~ A*B*C*D)    # new version is more efficient; model.y2 <- lm(y2 ~ (A + B + C + D)^4)
summary(model.y1)
summary(model.y2)
summary(model.y1)
summary(lm(y1~A*B*C*D, data=solar))
summary(lm(y1~A*B*C*D, data=solar))
summary(model.y2)
summary(lm(y2~A*B*C*D, data=solar))
solar
options(repos = c(CRAN="http://cran.r-project.org"))
test -e ~/.Rprofile
help(solar)
library(pid)
help(solar)
