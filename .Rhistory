library(ggplot2)
install.packages("ggplot2")
help(require)
setRepositories(addURLs =
c(CRANxtras = "http://www.stats.ox.ac.uk/pub/RWin"))ads
R_HOME
R_HOME/etc/repositoriesads
R.home()
http://R-Forge.R-project.org
help(setRepositories)
getOption("repos")
chooseCRANmirror()
install.packages("FrF2")
setwd("~/Dropbox/Coursera/R-package/v0.1")
library(pid)
help(aes_string)
library(pid)
T <- c(-1, +1, -1, +1)  # centered and scaled temperature
S <- c(-1, -1, +1, +1)  # centered and scaled speed variable
y <- c(69, 60, 64, 53)  # conversion, is our response variable, y
doe.model <- lm(y ~ T + S + T * S)  # create a model with main effects, and interaction
paretoPlot(doe.model)
dir()
library(pid)
T <- c(-1, +1, -1, +1)  # centered and scaled temperature
S <- c(-1, -1, +1, +1)  # centered and scaled speed variable
y <- c(69, 60, 64, 53)  # conversion, is our response variable, y
doe.model <- lm(y ~ T + S + T * S)  # create a model with main effects, and interaction
paretoPlot(doe.model)
data(pollutant)
mod.full <- lm(y ~ C*T*S, data=pollutant)
paretoPlot(mod.full)
library(pid)
library(pid)
library(pid)
help("na.omit")
help(coeff)
help(coef)
help(importFrom)
importFrom
library(pid)
library(pid)
T <- c(-1, +1, -1, +1)  # centered and scaled temperature
S <- c(-1, -1, +1, +1)  # centered and scaled speed variable
y <- c(69, 60, 64, 53)  # conversion, is our response variable, y
doe.model <- lm(y ~ T + S + T * S)  # create a model with main effects, and interaction
paretoPlot(doe.model)
library(pid)
library(pid)
devtools::install_github("jennybc/googlesheets")
install.packages("devtools")
help(devtools)
install.packages("pid")
library(pid)
help(paretoPlot)
data(pollutant)
mod.full <- lm(y ~ C*T*S, data=pollutant)
paretoPlot(mod.full)
library(pid)
data("pollutant")
help(pollutant)
setwd("~/")
library(pid)
paretoPlot
data(pollutant)
mod.full <- lm(y ~ C*T*S, data=pollutant)
paretoPlot(mod.full)
library(pid)
data(pollutant)
mod.full <- lm(y ~ C*T*S, data=pollutant)
paretoPlot(mod.full)
paretoPlot
library(car)
help(qqPlot)
help(deparse)
read.csv('http://openmv.net/file/oil-company-doe.csv')
setwd("~/Dropbox/Coursera/R-package/pid-dev/data")
save
dir
oil.doe <- read.csv('http://openmv.net/file/oil-company-doe.csv')
save(oil.doe, )
save(oil.doe, 'oildoe')
save('oildoe', oil.doe)
help(save)
save('oil.doe', 'oildoe')
save(c('oil.doe',), 'oildoe')
save(c('oil.doe'), 'oildoe')
save(c('oil.doe'), file='oildoe.rda')
save('oil.doe', file='oildoe.rda')
summary(oil.doe)
load(solar)
setwd("~/Dropbox/Coursera/R-package/pid-dev/data")
load('solar.rda')
summary(solar)
solar$colnames
colnames
colnames(solar)
colnames(solar) <- c("A"                     "B"                     "C"                     "D", "y1", "y2")
colnames(solar) <- c("A" ,                    "B"    ,                 "C"     ,                "D", "y1", "y2")
solar
<- c(-1, +1)
design <- expand.grid(A=x, B=x, C=x, D=x)
A <- design$A
B <- design$B
C <- design$C
D <- design$D
# y1 = collection efficiency
y1 <- c(43.5, 51.3, 35.0, 38.4, 44.9, 52.4, 39.7, 41.3, 41.3, 50.2, 37.5, 39.2, 43, 51.9, 39.9, 41.6)
# y2 = energy delivery efficiency
y2 <- c(82, 83.7, 61.7,100, 82.1, 84.1, 67.7, 100, 82, 86.3, 66, 100, 82.2, 89.8, 68.6, 100)
# Full factorial model for the chosen y
model.y1 <- lm(y1 ~ A*B*C*D)    # new version is more efficient; model.y1 <- lm(y1 ~ (A + B + C + D)^4)
model.y2 <- lm(y2 ~ A*B*C*D)    # new version is more efficient; model.y2 <- lm(y2 ~ (A + B + C + D)^4)
summary(model.y1)
summary(model.y2)
x <- c(-1, +1)
design <- expand.grid(A=x, B=x, C=x, D=x)
A <- design$A
B <- design$B
C <- design$C
D <- design$D
# y1 = collection efficiency
y1 <- c(43.5, 51.3, 35.0, 38.4, 44.9, 52.4, 39.7, 41.3, 41.3, 50.2, 37.5, 39.2, 43, 51.9, 39.9, 41.6)
# y2 = energy delivery efficiency
y2 <- c(82, 83.7, 61.7,100, 82.1, 84.1, 67.7, 100, 82, 86.3, 66, 100, 82.2, 89.8, 68.6, 100)
# Full factorial model for the chosen y
model.y1 <- lm(y1 ~ A*B*C*D)    # new version is more efficient; model.y1 <- lm(y1 ~ (A + B + C + D)^4)
model.y2 <- lm(y2 ~ A*B*C*D)    # new version is more efficient; model.y2 <- lm(y2 ~ (A + B + C + D)^4)
summary(model.y1)
summary(model.y2)
summary(model.y1)
summary(lm(y1~A*B*C*D, data=solar))
summary(lm(y1~A*B*C*D, data=solar))
summary(model.y2)
summary(lm(y2~A*B*C*D, data=solar))
solar
options(repos = c(CRAN="http://cran.r-project.org"))
test -e ~/.Rprofile
help(solar)
library(pid)
help(solar)
library(pid)
help(solar
)
local({r <- getOption("repos")
local({r <- getOption("repos"))
getOption("repos")
help(paretoPlot)
library(pid)
help(solar)
setwd("~/")
install.packages(c("boot", "chron", "class", "cluster", "foreign", "gdata", "gtools", "igraph", "KernSmooth", "lme4", "manipulate", "MASS", "Matrix", "nlme", "nnet", "pid", "plyr", "rpart", "rversions", "spatial", "stringi", "survival", "vcd"))
library(pi)
library(pid)
data(solar)
whos
dir()
summary(solar)
help(solar)
data(pollutant)
read.csv('http://openmv.net/file/blender-efficiency.csv')
gids = c(
"pizza"="1583978737",
"reagents"="924803334",
"water" = "533459145",
"golf" = "1666048841",
"jump" = "1512917482",
"runner" = "1003465118"
)
# Adjust for the sheet you want, using one of the keys above
chosenSheet = gids["pizza"]
f = paste("https://docs.google.com/spreadsheets/d/15aFcVlzc5cTD9QymMkKy61bZwwAAvczLNcg6Wq9sqlw/export?exportFormat=csv&gid=", chosenSheet, sep="")
dat <- read.table(f, header=TRUE, sep=",")
f
dat <- read.table(f, header=TRUE, sep=",")
f = paste("http://docs.google.com/spreadsheets/d/15aFcVlzc5cTD9QymMkKy61bZwwAAvczLNcg6Wq9sqlw/export?exportFormat=csv&gid=", chosenSheet, sep="")
dat <- read.table(f, header=TRUE, sep=",")
paste("https://docs.google.com/spreadsheets/d/15aFcVlzc5cTD9QymMkKy61bZwwAAvczLNcg6Wq9sqlw/export?exportFormat=csv&gid=", chosenSheet, sep="")
read.table(f, header=TRUE, sep=",")
read.csv('~/pizza.csv')
read.csv('~/pizza.csv')
data<-read.csv('~/pizza.csv')
summary(A)
summary(data)
colnames(data) = c("A", "B", "C", "y")
data
mapvalues
library(plyr)
help(mapvalues)
help(plyt)
help(plyr)
mapvalues
mapvalues(data$A, levels(data$A))
mapvalues(data$A, levels(data$A), c(-1.5, -1, 0, 1))
mapvalues(data$A, levels(data$A), c(-1, 1))
level(data$A)
levels(data$A)
mapvalues(data$A, c("Thin", "Thick"), c(-1, 1))
class(mapvalues(data$A, c("Thin", "Thick"), c(-1, 1)))
data$A<-mapvalues(data$A, c("Thin", "Thick"), c(-1, 1)))
data$A<-mapvalues(data$A, c("Thin", "Thick"), c(-1, 1))
data
data$A<-mapvalues(data$A, c(-1,1),c("Thin", "Thick")
asdasdas
data$A<-mapvalues(data$A, c(-1,1),c("Thin", "Thick"))
data
setwd("~/Dropbox/Coursera/R-package/pid-dev/data")
help(save)
pizza <-data
pizza
save('pizza', 'pizza.rda')
save('pizza', file='pizza.rda')
steam<-data.frame(S=c("Low", "High", "Low", "High"), R=c("Low", "Low", "High", "High"))
steam
steam<-data.frame(S=c("Low", "High", "Low", "High"), R=c("Low", "Low", "High", "High"), y=c(650,
710,
500,
815))
steam
save('steam', file='steam.rda')
golf<-read.csv('golf.csv')
golf<-read.csv('~/golf.csv')
gold
golf
golf<-read.csv('~/golf.csv')
golf
levels(golf$T)
mapvalues
mapvalues(golf$T, c("14:00" "9:00"), c(+1,-1))
mapvalues(golf$T, c("14:00", "9:00"), c(+1,-1))
sort
help(sort)
a <- c(4, 3, 2, NA, 1)
b <- c(4, NA, 2, 7, 1)
z <- cbind(a, b)
a
z
order(a, b));
order(a, b))
order(a, b)
help()
gold
golf
order(golf)
order(golf$H)
order(golf$T)
golf[order(golf$T),]
golf[order(golf[order(golf$T),)$C]
order(golf[order(golf$T),)$C
order(golf[order(golf$T),)
order(golf[order(golf$T)
order(golf[order(golf$T))
order(golf[order(golf$T)])
order(golf[order(golf$T),])
order(golf[order(golf$T),]$C)
golf[order(golf[order(golf$T),]$C),]
golf[order(golf[order(golf$T),]$N),]
gold
golf
save('golf', 'golf.rda')
save('golf', file='golf.rda')
read.csv('~/jump.csv')
read.csv('~/jump.csv')
jump<-read.csv('~/jump.csv')
jump$S
mapvalues(jump$S, c("Shoes off", "Shoes on"), c(-1,1))
jump
save('jump', file='jump.rda')
runner <- read.csv('~/runner.csv')
runner
save('runner', 'runner.rda')
save('runner', file='runner.rda')
boiling <- read.csv('~/boiling.csv')
boiling
save('boiling', file='boiling.rda')
library(pid)
data(oildoe)
oildoe
oil.doe
data(boiling)
boiling
boiling<-read.csv('~/boiling.csv')
boilding
boiling
save('boiling', file='boiling.rda')
data(boiling)
boiling
library(pid)
data(boiling)
boiling
levels(boiling$A)
levels(boiling$B)
levels(boiling$C)
levels(boiling$D)
as.factor(levels(boiling$A))
library(pid)
data(boiling)
help(boiling)
library(pid)
help(boiling)
library(pid)
help(boiling)
library(pid)
help(boiling)
library(pid)
library(boiling)
library(boilingpot)
setwd("~/Dropbox/Coursera/R-package/pid-dev/data")
load('boiling.rda')
boilingpot<-boiling
save('boilingpot', file='boilingpot.rda')
boilingpot
load('golf.rda')
golf
library(pid)
data(jump)
jump
colnames(jump)
colnames(jump)<-c("R", "S", "T","y")
save('jump', file='jump.rda')
load(jump)
load('jump')
load('jump.rda')
jump
lm(y~R*S*F, data=jump)
jump
lm(y~R*S*T, data=jump)
load('runner.rda')
runner
load('steam.rda')
steam
